// =============================================================
// ‚úÖ FUNCI√ìN √öNICA: CARGAR DATOS (VERSI√ìN REAL CON NETLIFY FUNCTION)
// Se llama al endpoint del proxy para obtener datos del W3C.
// =============================================================
async function fetchW3cStandards() {
    const container = document.getElementById("w3c-standards-container");
    container.innerHTML = 'Conectando con el Back-End Serverless (Netlify Function)...';

    try {
        // Llamada real al endpoint de Netlify Function
        // El navegador pide el dato a tu propio servidor Netlify, evitando CORS.
        const response = await fetch('/.netlify/functions/w3c-proxy');
        const data = await response.json();

        if (!response.ok) {
            container.innerHTML = `<div class="w3c-card error"><h3>‚ùå Error de Back-End</h3><p>Fallo: ${data.error}</p><p>Revisa la consola y el log de tu Netlify Function.</p></div>`;
            return;
        }

        // Si es exitoso, actualiza el contenido de la gu√≠a con los datos devueltos
        container.innerHTML = `
            <div class="w3c-card success">
                <h3>‚úÖ Carga Exitosa v√≠a Back-End Proxy</h3>
                <p><strong>URL de origen:</strong> <code>${data.source}</code></p>
                <p><strong>T√≠tulo Extra√≠do:</strong> ${data.title}</p>
                <p>¬°La Function ha evitado el CORS y devuelto los datos!</p>
                <p style="margin-top: 10px;">
                    <a href="#w3c-iso-codes" onclick="renderSection('#w3c-iso-codes');" class="w3c-btn">
                        Ver Contenido Completo Extra√≠do ‚û°Ô∏è
                    </a>
                </p>
            </div>
        `;

    } catch (error) {
        container.innerHTML = `<div class="w3c-card error"><h3>‚ùå Error de Conexi√≥n</h3><p>No se pudo conectar con el endpoint de la funci√≥n. Aseg√∫rate de que el archivo 'w3c-proxy.js' existe en tu carpeta netlify/functions.</p></div>`;
    }
}


// =============================================================
// üÜï FUNCI√ìN AS√çNCRONA: BUSCADOR EXTERNO (PROXY SIMULADO/DEMO)
// Se invoca para palabras clave W3C, y ahora devuelve un enlace directo a la secci√≥n con el contenido que obtuvimos.
// =============================================================
async function fetchW3cSearch(query) {
    const contentElement = document.getElementById("content");
    contentElement.innerHTML = `
        <div class="w3c-card info">
            <h3>üåê Buscando en W3C...</h3>
            <p>Consultando al servicio de Back-End (Netlify Function) para buscar: <strong>${query}</strong></p>
        </div>
    `;

    // Simula el tiempo de red y procesamiento del servidor
    await new Promise(resolve => setTimeout(resolve, 2000)); 

    // SIMULACI√ìN DE DEVOLUCI√ìN DEL RESULTADO RELEVANTE
    const resultHtml = `
        <h2>üîé Resultados Externos para "${query}" (W3C)</h2>
        <div class="w3c-card success">
            <h3>Resultado Relevante Encontrado sobre C√≥digos ISO</h3>
            <p>El Back-End simulado encontr√≥ y parse√≥ el resultado del W3C sobre la pregunta de c√≥digos ISO.</p>
            <p><strong>Acci√≥n:</strong> Presiona el bot√≥n para ir a la secci√≥n local que contiene esta informaci√≥n cr√≠tica ya extra√≠da.</p>
            <a href="#w3c-iso-codes" onclick="renderSection('#w3c-iso-codes'); document.getElementById('searchInput').value='';" class="w3c-btn">
                Ver Respuesta W3C Completa Aqu√≠ ‚û°Ô∏è
            </a>
        </div>
        <div class="search-result-card">
             <h3><a href="#estandares-w3c" onclick="renderSection('#estandares-w3c'); document.getElementById('searchInput').value='';">Ver Contenido Local de W3C/WCAG</a></h3>
             <p>Ver la secci√≥n de esta gu√≠a que contiene informaci√≥n sobre est√°ndares web y accesibilidad.</p>
        </div>
    `;

    contentElement.innerHTML = resultHtml;
}


// =============================================================
// ‚úÖ FUNCI√ìN DE B√öSQUEDA DEDICADA (Instant√°nea)
// =============================================================
function searchContent() {
    const query = document.getElementById("searchInput").value.trim().toLowerCase();
    const contentElement = document.getElementById("content");

    if (query.length === 0) {
        renderSection(location.hash); 
        return;
    }

    // 1. Identificar si la b√∫squeda debe ir al servicio externo (W3C/Netlify Proxy)
    const w3cKeywords = ['w3c', 'accesibilidad', 'wcag', 'wai', 'standares web', 'html', 'css', 'javascript', 'iso', 'idioma', 'etiqueta'];
    const isW3CQuery = w3cKeywords.some(keyword => query.includes(keyword));

    if (isW3CQuery) {
        // Llamar a la funci√≥n que usa el servicio Back-End simulado/demo
        fetchW3cSearch(query); 
        return;
    }


    // 2. Si no es W3C, realizar la b√∫squeda interna normal

    // HACK para incluir palabras clave de W3C en la b√∫squeda interna tambi√©n
    const searchableSections = { ...sections }; 
    searchableSections['estandares-w3c'] = searchableSections['estandares-w3c'].replace(
        '</section>', 
        'WCAG W3C Accesibilidad Usabilidad' + '</section>'
    );
    // Fin del HACK

    let resultsHtml = '<h2>üîé Resultados de la B√∫squeda Interna:</h2>';
    let matchFound = false;

    for (const key in searchableSections) {
        if (searchableSections.hasOwnProperty(key)) {
            const fullContent = searchableSections[key];

            const titleMatch = fullContent.match(/<h2>(.*?)<\/h2>/);
            const title = titleMatch ? titleMatch[1] : key.replace(/-/g, ' ').toUpperCase();

            const contentLower = fullContent.toLowerCase();

            if (contentLower.includes(query) || title.toLowerCase().includes(query)) {
                matchFound = true;

                let summary = fullContent.substring(fullContent.indexOf('</h2>') + 5).trim();
                summary = summary.replace(/<[^>]*>/g, '').substring(0, 150) + '...'; 

                const highlightedSummary = summary.replace(new RegExp(query, 'gi'), (match) => `<span class="highlight">${match}</span>`);

                resultsHtml += `
                    <div class="search-result-card">
                        <h3><a href="#${key}" onclick="renderSection('#${key}'); document.getElementById('searchInput').value='';">${title}</a></h3>
                        <p>${highlightedSummary}</p>
                    </div>
                `;
            }
        }
    }

    if (!matchFound) {
        resultsHtml += '<div class="w3c-card error"><h3>No se encontraron resultados en esta gu√≠a.</h3><p>Intenta buscar con un t√©rmino diferente.</p></div>';
    }

    contentElement.innerHTML = resultsHtml;
}


// =============================================================
// ‚úÖ FUNCIONES DE UTILIDAD Y EJERCICIOS (Sin cambios)
// =============================================================

function copyCode(button) {
    const codeContainer = button.previousElementSibling;
    const code = codeContainer ? codeContainer.textContent.trim() : '';

    if (code) {
        navigator.clipboard.writeText(code).then(() => {
            const originalText = button.textContent;
            button.textContent = "¬°Copiado! ‚úÖ";
            setTimeout(() => button.textContent = originalText, 2000);
        }).catch(err => {
            console.error('Error al copiar el texto: ', err);
            alert('Error al copiar el texto.');
        });
    } else {
        console.error("No se encontr√≥ el contenedor de c√≥digo.");
    }
}

function checkLinuxCommand() {
    const input = document.getElementById("linuxInput").value.trim().toLowerCase();
    const feedback = document.getElementById("linuxFeedback");
    if (input === "sudo apt install firefox") {
        feedback.textContent = "‚úÖ ¬°Correcto! El comando instala el paquete.";
        feedback.style.color = "green";
    } else {
        feedback.textContent = "‚ùå Intenta de nuevo. Recuerda la sintaxis: sudo apt install [paquete].";
        feedback.style.color = "red";
    }
}

function checkHttpCode() {
    const input = document.getElementById('httpCodeInput').value.trim();
    const feedback = document.getElementById('httpCodeFeedback');

    if (input === '301') {
        feedback.innerHTML = '¬°Correcto! El c√≥digo **301 Moved Permanently** informa al navegador que debe usar la nueva URL para futuras peticiones.';
        feedback.style.color = '#28a745';
    } else {
        feedback.innerHTML = '‚ùå Incorrecto. El c√≥digo correcto es **301**. Los c√≥digos 3xx indican redirecciones.';
        feedback.style.color = '#dc3545';
    }
}

function checkDamQuiz() {
    const value = document.getElementById("damQuiz").value;
    const feedback = document.getElementById("damFeedback");
    if (value === "Java") {
        feedback.textContent = "‚úÖ ¬°Correcto! Java se usa ampliamente en DAM y desarrollo Android.";
        feedback.style.color = "green";
    } else {
        feedback.textContent = "‚ùå Intenta de nuevo. Uno de esos es un lenguaje clave en DAM.";
        feedback.style.color = "red";
    }
}

function checkDawQuiz() {
    const value = document.getElementById("dawQuiz").value;
    const feedback = document.getElementById("dawFeedback");
    if (value === "JavaScript") {
        feedback.textContent = "‚úÖ ¬°Correcto! JavaScript es esencial en el Front-End web.";
        feedback.style.color = "green";
    } else {
        feedback.textContent = "‚ùå Intenta de nuevo. Uno de esos lenguajes es el n√∫cleo de la interactividad web.";
        feedback.style.color = "red";
    }
}

function checkSqlQuery() {
    const input = document.getElementById("sqlInput").value.trim();
    const feedback = document.getElementById("sqlFeedback");

    const normalizedInput = input.toLowerCase().replace(/\s+/g, ' ').replace(/;$/, '').trim();

    if (normalizedInput === "select nombre from alumnos") {
        feedback.textContent = "‚úÖ ¬°Correcto! Usas SELECT para leer y especificas la columna 'nombre' de la tabla 'alumnos'.";
        feedback.style.color = "green";
    } else {
        feedback.textContent = "‚ùå Incorrecto. Recuerda la sintaxis: SELECT [columnas] FROM [tabla].";
        feedback.style.color = "red";
    }
}

function checkJoinQuery() {
    const input = document.getElementById("joinInput").value.trim();
    const feedback = document.getElementById("joinFeedback");

    const normalizedInput = input.toLowerCase().replace(/\s+/g, ' ').replace(/;$/, '').trim();

    if (normalizedInput.includes('inner join') && normalizedInput.includes('alumnos') && normalizedInput.includes('clases') && normalizedInput.includes('id_clase')) {
        feedback.textContent = "‚úÖ ¬°Correcto! Usaste INNER JOIN para conectar las tablas 'alumnos' y 'clases' usando la clave 'id_clase'. ¬°Concepto esencial en DAM/DAW!";
        feedback.style.color = "green";
    } else {
        feedback.textContent = "‚ùå Incorrecto. Recuerda la estructura b√°sica del JOIN: SELECT * FROM Tabla1 INNER JOIN Tabla2 ON Tabla1.Clave = Tabla2.Clave.";
        feedback.style.color = "red";
    }
}

function checkPooQuery() {
    const input = document.getElementById("pooInput").value.trim();
    const feedback = document.getElementById("pooFeedback");

    const normalizedInput = input.toLowerCase().replace(/\s+/g, ' ').replace(/;$/, '').trim();

    if (normalizedInput.includes('const devmaria') && normalizedInput.includes('new desarrollador') && normalizedInput.includes('mar√≠a j.') && normalizedInput.includes('front-end')) {
        feedback.textContent = "‚úÖ ¬°Excelente! Has creado una nueva instancia del objeto 'Desarrollador'. ¬°Dominas la creaci√≥n de objetos!";
        feedback.style.color = "green";
    } else {
        feedback.textContent = "‚ùå Incorrecto. Recuerda la sintaxis: const [nombreVariable] = new [NombreClase]('[valor1]', '[valor2]');";
        feedback.style.color = "red";
    }
}


// =============================================================
// ‚úÖ Contenido din√°mico por secci√≥n (sections) - ACTUALIZADO
// =============================================================
const sections = {
    // HOME - Coincide con #home
    home: `
        <section id="home">
            <h2>üëã Bienvenido a Mi Gu√≠a Interactiva</h2>
            <p>Esta gu√≠a te acompa√±ar√° paso a paso en tu formaci√≥n como programador, Luciano Francisco Amaya Guti√©rrez. Navega por el men√∫ superior para explorar los temas clave de los ciclos DAM y DAW, desde los fundamentos hasta el control de versiones y el despliegue profesional.</p>
            <p>¬°Comencemos!</p>
        </section>
    `,

    // DAM vs DAW - Coincide con #que-es-dam-daw
    "que-es-dam-daw": `
        <section id="que-es-dam-daw">
            <h2>üéì DAM vs DAW: Elige tu camino</h2>
            <p>DAM (Desarrollo de Aplicaciones Multiplataforma) y DAW (Desarrollo de Aplicaciones Web) son especialidades con un enfoque distinto:</p>

            <h3>üéØ Enfoque Principal</h3>
            <table>
                <thead>
                    <tr>
                        <th>Ciclo</th>
                        <th>Entorno Principal</th>
                        <th>Ejecuci√≥n</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>**DAM**</td>
                        <td>Multiplataforma (Escritorio/M√≥vil)</td>
                        <td>Se instala y ejecuta directamente en el sistema operativo del dispositivo (m√≥vil o escritorio).</td>
                    </tr>
                    <tr>
                        <td>**DAW**</td>
                        <td>Web</td>
                        <td>Se ejecuta en un navegador de internet (Front-End) o en un servidor (Back-End).</td>
                    </tr>
                </tbody>
            </table>
        </section>
    `,

    // DAW - Coincide con #daw
    daw: `
        <section id="daw">
            <h2>üåê Desarrollo de Aplicaciones Web (DAW)</h2>
            <p>Especialidad centrada en el dise√±o, desarrollo y mantenimiento de sitios web y aplicaciones que se ejecutan en navegadores y servidores.</p>

            <h3>üìö Tecnolog√≠as Esenciales</h3>
            <ul>
                <li>**HTML5:** Estructura de la web.</li>
                <li>**CSS3:** Dise√±o, estilo y apariencia visual.</li>
                <li>**JavaScript:** Interactividad y l√≥gica del lado del cliente.</li>
            </ul>

            <h3>üß™ Ejercicio Interactivo</h3>
            <p>¬øCu√°l de estos lenguajes se usa para a√±adir interactividad en el Front-End?</p>
            <select id="dawQuiz">
                <option value="">Selecciona una opci√≥n</option>
                <option value="PHP">PHP</option>
                <option value="JavaScript">JavaScript</option>
                <option value="Python">Python</option>
            </select>
            <button onclick="checkDawQuiz()">Comprobar</button>
            <p id="dawFeedback"></p>
        </section>
    `,

    // DAM - Coincide con #dam
    dam: `
        <section id="dam">
            <h2>üíª Desarrollo de Aplicaciones Multiplataforma (DAM)</h2>
            <p>Especialidad centrada en la creaci√≥n de aplicaciones inform√°ticas que funcionan en m√∫ltiples sistemas operativos y dispositivos m√≥viles.</p>

            <h3>üìö Tecnolog√≠as Esenciales</h3>
            <ul>
                <li>**Java/Kotlin:** L√≥gica principal, especialmente en desarrollo Android.</li>
                <li>**C# (.NET):** Aplicaciones de escritorio para Windows.</li>
                <li>**XML / XAML:** Dise√±o de la Interfaz de Usuario (UI).</li>
            </ul>

            <h3>üß™ Ejercicio Interactivo</h3>
            <p>¬øCu√°l de los siguientes lenguajes se usa com√∫nmente para la l√≥gica principal en DAM?</p>
            <select id="damQuiz">
                <option value="">Selecciona una opci√≥n</option>
                <option value="HTML">HTML</option>
                <option value="Java">Java</option>
                <option value="Ruby">Ruby</option>
            </select>
            <button onclick="checkDamQuiz()">Comprobar</button>
            <p id="damFeedback"></p>
        </section>
    `,

    // HERRAMIENTAS DEV - Coincide con #herramientas-dev
    "herramientas-dev": `
        <section id="herramientas-dev">
            <h2>üõ†Ô∏è Herramientas de Desarrollo (IDEs y VSC)</h2>
            <p>Visual Studio Code (VSC) es el editor m√°s popular. Mediante extensiones, se convierte en un IDE completo para DAW y DAM.</p>

            <h3>Extensiones Clave de VSC</h3>
            <table>
                <thead>
                    <tr>
                        <th>Extensiones Clave</th>
                        <th>Funci√≥n</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>**Live Server**</td>
                        <td>Previsualizaci√≥n instant√°nea de proyectos web (DAW).</td>
                    </tr>
                    <tr>
                        <td>**Language Packs**</td>
                        <td>Soporte para lenguajes como Java o C# (DAM).</td>
                    </tr>
                    <tr>
                        <td>**GitLens**</td>
                        <td>Integraci√≥n avanzada con el control de versiones Git.</td>
                    </tr>
                </tbody>
            </table>
        </section>
    `,

    // COMANDOS LINUX - Coincide con #linux-detallado
    "linux-detallado": `
        <section id="linux-detallado">
            <h2>üêß Comandos Esenciales de Linux</h2>
            <p>Linux es el sistema operativo est√°ndar para servidores. Aprender comandos es crucial para el despliegue y administraci√≥n de sistemas.</p>

            <h3>Comando Fundamental</h3>
            <div class="terminal-command">
                sudo apt update && sudo apt upgrade -y
            </div>
            <p>Este comando actualiza la lista de paquetes y luego instala las nuevas versiones de forma autom√°tica.</p>

            <h3>Ejercicio interactivo</h3>
            <label for="linuxInput">Escribe el comando completo que usar√≠as para instalar el navegador Firefox:</label><br>
            <input type="text" id="linuxInput" placeholder="Ej: sudo apt install [paquete]" />
            <button onclick="checkLinuxCommand()">Comprobar</button>
            <p id="linuxFeedback"></p>
        </section>
    `,

    // FLUJO GIT - Coincide con #flujo-git
    "flujo-git": `
        <section id="flujo-git">
            <h2>üöÄ Flujo de Despliegue y Control de Versiones</h2>
            <p>**Git** es esencial para el control de versiones y **Vercel/Netlify** para desplegar proyectos web.</p>

            <h3>Flujo Git B√°sico</h3>
            <p>Para guardar y subir tu c√≥digo a un repositorio:</p>
            <div class="terminal-command">
                git init<br>
                git add .<br>
                git commit -m "Mensaje de tu cambio"<br>
                git push origin main
            </div>
            <button onclick="copyCode(this)">Copiar comandos</button>

            <h3>Despliegue Web (DAW)</h3>
            <p>Plataformas como Vercel o Netlify permiten desplegar tu aplicaci√≥n web (DAW) autom√°ticamente desde tu repositorio de Git.</p>
        </section>
    `,

    // BLOG - Coincide con #blog
    "blog": `
        <section id="blog">
            <h2>üì∞ Mi Blog de Programaci√≥n</h2>
            <p>Aqu√≠ compartir√© art√≠culos, tutoriales y reflexiones sobre el desarrollo web (DAW), aplicaciones multiplataforma (DAM) y las √∫ltimas tendencias tecnol√≥gicas.</p>

            <div class="blog-container">
                <article class="blog-post">
                    <h3>Comandos Linux: El ABC para el Servidor</h3>
                    <p class="post-meta">Publicado por Luciano F.A.G. el 15 de Octubre, 2025</p>
                    <p>Un repaso a los comandos esenciales como **cd**, **ls**, y **sudo**, cruciales para la administraci√≥n de cualquier entorno de desarrollo o servidor.</p>
                    <a href="#linux-detallado" class="read-more-btn">Leer Tutorial Completo</a>
                </article>

                <article class="blog-post">
                    <h3>DAW vs DAM: ¬øCu√°l elegir en 2026?</h3>
                    <p class="post-meta">Publicado por Luciano F.A.G. el 20 de Septiembre, 2025</p>
                    <p>Analizamos las salidas profesionales, salarios y tecnolog√≠as clave para ayudarte a decidir entre el desarrollo web y el desarrollo de aplicaciones nativas.</p>
                    <a href="#que-es-dam-daw" class="read-more-btn">Leer An√°lisis Completo</a>
                </article>

                </div>
        </section>
    `,

    // EST√ÅNDARES W3C - Coincide con #estandares-w3c
    "estandares-w3c": `
        <section id="estandares-w3c">
            <h2>üåê Accesibilidad y Est√°ndares W3C (WCAG)</h2>
            <p>La accesibilidad web (DAW) y la usabilidad (DAM) son fundamentales. Los est√°ndares **WCAG (Web Content Accessibility Guidelines)** son la referencia mundial.</p>

            <h3>Demostraci√≥n de Carga de Datos en Vivo (Soluci√≥n CORS)</h3>
            <p>Esta secci√≥n demuestra una habilidad Full-Stack al llamar a una **Netlify Function** para obtener datos de una URL externa, burlando la pol√≠tica CORS.</p>

            <button onclick="fetchW3cStandards()" class="w3c-btn">Actualizar Est√°ndares Ahora</button>

            <div id="w3c-standards-container" style="margin-top: 20px;">
                <p>Pulsa el bot√≥n para cargar la informaci√≥n.</p>
            </div>
        </section>
    `,

    // üÜï SECCI√ìN: Contenido extra√≠do de W3C sobre c√≥digos ISO (Hardcodeado para la demo)
    "w3c-iso-codes": `
        <section id="w3c-iso-codes">
            <h2>üìù C√≥digos de Idioma ISO (2 vs 3 letras)</h2>
            <p>Este contenido fue extra√≠do de forma simulada/demostraci√≥n del sitio **w3.org** a trav√©s de la l√≥gica de Back-End.</p>

            <h3>Respuesta del W3C (Est√°ndar Actual)</h3>
            <div class="w3c-card info">
                <p>Tanto en Internet como en la Web se utilizan etiquetas de idioma para indicar el idioma natural del texto en protocolos y formatos, como **HTML, XHTML, XML, HTTP** y otros. En el pasado, los valores de las etiquetas de idioma estaban definidos por la especificaci√≥n **RFC 3066** Etiquetas para la identificaci√≥n de idiomas (y la anterior RFC 1766), y comenzaban con un **c√≥digo de idioma de dos letras ISO 639-1** o un **c√≥digo de tres letras ISO 639-2**.</p>
                <p>Para algunos idiomas exist√≠an alternativas de dos y tres letras en los c√≥digos ISO. (Incluso para algunos idiomas hab√≠a hasta dos alternativas de tres letras para elegir). En algunos casos, resultaba confuso elegir qu√© c√≥digo ISO se deb√≠a usar en una etiqueta de idioma.</p>
                <p>‚úÖ **Actualizaci√≥n (BCP 47):** Hoy en d√≠a ya no es necesario preocuparse por este tema. La especificaci√≥n actual, **BCP 47**, indica que para consultar las subetiquetas se debe recurrir al nuevo **Registro de subetiquetas de idioma de la IANA**, simplificando la elecci√≥n.</p>
            </div>
        </section>
    `,

    // SQL B√ÅSICO - Coincide con #sql-basico
    "sql-basico": `
        <section id="sql-basico">
            <h2>üóÑÔ∏è SQL B√°sico: La Persistencia de Datos</h2>
            <p>SQL (**Structured Query Language**) es el lenguaje est√°ndar para manejar bases de datos relacionales. Su fortaleza radica en la capacidad de relacionar datos de m√∫ltiples tablas.</p>

            <h3>Comandos Fundamentales (CRUD y JOIN)</h3>

            <p>El comando clave para relacionar tablas es **JOIN**, y el m√°s com√∫n es el **INNER JOIN**, que devuelve filas cuando hay coincidencias en ambas tablas.</p>

            <table class="sql-table">
                <thead>
                    <tr>
                        <th>Comando</th>
                        <th>Uso</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>**SELECT**</td>
                        <td>Leer datos de tablas.</td>
                    </tr>
                    <tr>
                        <td>**INSERT INTO**</td>
                        <td>Crear/a√±adir nuevos registros.</td>
                    </tr>
                    <tr>
                        <td>**INNER JOIN**</td>
                        <td>Combina filas de dos tablas bas√°ndose en una columna relacionada (llave).</td>
                    </tr>
                </tbody>
            </table>

            <h3>üß™ Ejercicio 1: SELECT</h3>
            <p>Imagina que tienes una tabla de 'alumnos'. Escribe la consulta SQL para obtener **solo la columna 'nombre'** de todos los alumnos:</p>

            <div class="code-editor">
                <textarea id="sqlInput" placeholder="Ej: SELECT * FROM tabla;"></textarea>
                <button onclick="checkSqlQuery()">Comprobar SELECT</button>
            </div>
            <p id="sqlFeedback"></p>

            <h3>üß™ Ejercicio 2: INNER JOIN</h3>
            <p>Tienes dos tablas: **'alumnos'** y **'clases'**. Ambas comparten la columna **'id_clase'**. Escribe el comando SQL completo para unir ambas tablas con un INNER JOIN:</p>

            <div class="code-editor">
                <textarea id="joinInput" placeholder="Ej: SELECT * FROM tabla1 INNER JOIN tabla2 ON tabla1.clave = tabla2.clave;"></textarea>
                <button onclick="checkJoinQuery()">Comprobar JOIN</button>
            </div>
            <p id="joinFeedback"></p>
        </section>
    `,

    // POO EN JAVASCRIPT - Coincide con #poo-js
    "poo-js": `
        <section id="poo-js">
            <h2>üß† POO en JavaScript: Clases y Objetos</h2>
            <p>La **Programaci√≥n Orientada a Objetos (POO)** organiza el c√≥digo alrededor de 'objetos' que contienen datos y funciones. En JavaScript, usamos la sintaxis de **clases** para crear planos (blueprints) de estos objetos.</p>

            <h3>Conceptos Clave de POO</h3>
            <ul>
                <li>**Clase:** El plano para crear objetos (Ej: Persona).</li>
                <li>**Objeto (Instancia):** Un elemento creado a partir de la clase (Ej: Luciano, Mar√≠a).</li>
                <li>**M√©todo:** Una funci√≥n definida dentro de una clase.</li>
                <li>**Herencia:** Una clase nueva que toma propiedades y m√©todos de una clase ya existente.</li>
            </ul>

            <h3>Ejemplo de Clase en JS</h3>
            <p>Una clase simple para representar un **Desarrollador**:</p>

            <div class="terminal-command">
                class Desarrollador {
                    constructor(nombre, rol) {
                        this.nombre = nombre;
                        this.rol = rol;
                    }

                    presentarse() {
                        return \`Hola, soy \${this.nombre} y mi rol es \${this.rol}.\`;
                    }
                }

                // Crear una instancia (un objeto)
                const devLuciano = new Desarrollador('Luciano F.', 'Full-Stack');
            </div>
            <button onclick="copyCode(this)">Copiar C√≥digo</button>

            <h3>üß™ Ejercicio Interactivo</h3>
            <p>Crea una nueva instancia de la clase **Desarrollador** llamada **devMaria** con el nombre 'Mar√≠a J.' y el rol 'Front-End'.</p>

            <div class="code-editor">
                <textarea id="pooInput" placeholder="Ej: const miObjeto = new Clase(...);"></textarea>
                <button onclick="checkPooQuery()">Comprobar POO</button>
            </div>
            <p id="pooFeedback"></p>
        </section>
    `,

    // SOBRE M√ç - Coincide con #sobre-mi
    "sobre-mi": `
        <section id="sobre-mi">
            <h2>üë§ Sobre M√≠</h2>
            <p>Hola, soy **Luciano Francisco Amaya Guti√©rrez**. Soy un estudiante apasionado por la programaci√≥n.</p>
            <p>Esta gu√≠a interactiva es parte de mi proyecto educativo para consolidar conocimientos clave de los ciclos DAM y DAW.</p>
        </section>
    `,

    // CONCEPTOS BASE - Coincide con #conceptos-base
    "conceptos-base": `
        <section id="conceptos-base">
            <h2>üìö Conceptos Base: El Vocabulario del Programador</h2>
            <p>Antes de escribir c√≥digo, debemos entender el panorama general. Dominar estos t√©rminos es el primer paso para interpretar cualquier proyecto.</p>

            <h3>Frontend y Backend</h3>
            <table class="concept-table">
                <thead>
                    <tr>
                        <th>Concepto</th>
                        <th>Funci√≥n Principal</th>
                        <th>Tecnolog√≠as Comunes</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>**Frontend**</td>
                        <td>La parte que el usuario ve e interact√∫a directamente. Se ejecuta en el navegador.</td>
                        <td>HTML, CSS, JavaScript (React, Vue, Angular).</td>
                    </tr>
                    <tr>
                        <td>**Backend**</td>
                        <td>El "cerebro" o servidor. Procesa la l√≥gica, gestiona la seguridad y almacena los datos.</td>
                        <td>Node.js, Python (Django/Flask), Java, PHP.</td>
                    </tr>
                </tbody>
            </table>

            <h3>T√©rminos Clave</h3>
            <ul>
                <li>**API (Application Programming Interface):** Un puente que permite a dos sistemas (ej. Frontend y Backend) hablar entre s√≠.</li>
                <li>**Base de Datos (BBDD):** Donde se almacena la informaci√≥n de manera persistente (ej. MySQL, MongoDB).</li>
            </ul>
        </section>
    `,

    // FLUJO HTTP - Coincide con #flujo-http
    "flujo-http": `
        <section id="flujo-http">
            <h2>üåê Flujo de Petici√≥n HTTP: C√≥mo funciona la Web</h2>
            <p>Para entender cualquier desarrollo web, es crucial saber qu√© ocurre desde que escribes una URL hasta que ves la p√°gina. Esto se conoce como el **Ciclo de Petici√≥n-Respuesta HTTP**.</p>

            <ol>
                <li>
                    <h3>1. Petici√≥n (Request) del Cliente üßë‚Äçüíª</h3>
                    <p>El **Navegador** (Cliente) toma la URL y lo primero que hace es un **DNS Lookup** para traducir el nombre del dominio a una direcci√≥n IP. Luego, env√≠a la Petici√≥n HTTP (que usa m√©todos como **GET** o **POST**) a esa direcci√≥n IP.</p>
                </li>
                <li>
                    <h3>2. Procesamiento del Servidor üß†</h3>
                    <p>El **Servidor Web** procesa la petici√≥n. Si es din√°mico, ejecuta c√≥digo (Node.js, Python) que interact√∫a con la **Base de Datos (BBDD)** para obtener informaci√≥n.</p>
                </li>
                <li>
                    <h3>3. Respuesta (Response) del Servidor üì¶</h3>
                    <p>El Servidor construye la respuesta que incluye un **C√≥digo de Estado HTTP** (ej. <strong>200 OK</strong> para √©xito, <strong>404 Not Found</strong> para error) y el contenido solicitado.</p>
                </li>
                <li>
                    <h3>4. Renderizado del Navegador üñºÔ∏è</h3>
                    <p>El Navegador analiza el HTML, aplica el CSS y ejecuta el JavaScript para mostrar la p√°gina.</p>
                </li>
            </ol>

            <section class="ejercicio">
                <h3>Test R√°pido: C√≥digos de Estado</h3>
                <p>¬øQu√© c√≥digo HTTP se genera cuando el navegador intenta acceder a una p√°gina que ha sido **movida permanentemente** a una nueva direcci√≥n?</p>
                <input type="text" id="httpCodeInput" placeholder="Ej: 200">
                <button onclick="checkHttpCode()">Comprobar Respuesta</button>
                <p id="httpCodeFeedback"></p>
            </section>
        </section>
    `,

    // ALGORITMOS Y FLUJO - Coincide con #algoritmos-flujo
    "algoritmos-flujo": `
        <section id="algoritmos-flujo">
            <h2>üß† L√≥gica y Algoritmos (Pensamiento Computacional)</h2>
            <p>Un **algoritmo** es una secuencia de pasos finitos y bien definidos para resolver un problema. Es la habilidad m√°s importante que aprender√°s.</p>

            <h3>Conceptos de Flujo</h3>
            <ol>
                <li>**Secuencia:** Las instrucciones se ejecutan una tras otra en orden.</li>
                <li>**Selecci√≥n (If/Else):** El c√≥digo toma una decisi√≥n basada en una condici√≥n. Ejemplo: *Si (edad > 18), entonces permitir acceso.*</li>
                <li>**Iteraci√≥n (Bucles):** Se repite un bloque de c√≥digo varias veces. Ejemplo: *Mostrar la lista de 10 usuarios.*</li>
            </ol>

            <p>Practica la escritura de **pseudoc√≥digo** (c√≥digo en lenguaje natural) antes de codificar para simplificar problemas complejos.</p>
        </section>
    `,

    // INTRODUCCI√ìN HTML - Coincide con #introduccion-html
    "introduccion-html": `
        <section id="introduccion-html">
            <h2>üìù HTML5: Estructura, Sem√°ntica y Accesibilidad</h2>
            <p>HTML no es un lenguaje de programaci√≥n, sino de **marcado**. Define la estructura y el significado (**sem√°ntica**) del contenido web.</p>

            <h3>Sem√°ntica Importante</h3>
            <p>Usar las etiquetas correctas ayuda a los navegadores y a los lectores de pantalla a entender tu contenido (accesibilidad W3C):</p>
            <table class="html-table">
                <tr><td>**&lt;header&gt;**</td><td>Contiene el logo, el t√≠tulo y la navegaci√≥n principal.</td></tr>
                <tr><td>**&lt;nav&gt;**</td><td>Contiene los enlaces principales del sitio.</td></tr>
                <tr><td>**&lt;main&gt;**</td><td>Contiene el contenido √∫nico y central de la p√°gina. Solo debe haber uno.</td></tr>
                <tr><td>**&lt;section&gt;** / **&lt;article&gt;**</td><td>Contenedores para agrupar temas o art√≠culos relacionados.</td></tr>
            </table>
        </section>
    `,

    // METODOLOG√çA AGILE - Coincide con #metodologia-agile
    "metodologia-agile": `
        <section id="metodologia-agile">
            <h2>üèÉ Metodolog√≠as √Ågiles (SCRUM y Kanban)</h2>
            <p>En el desarrollo profesional (tanto en DAM como en DAW), se usa la metodolog√≠a **√Ågil** para gestionar proyectos de manera flexible e incremental, a trav√©s de ciclos cortos (Sprints).</p>

            <h3>SCRUM: El Marco m√°s Usado</h3>
            <ul>
                <li>**Sprint:** Ciclo de trabajo de 1 a 4 semanas donde se entrega un incremento funcional.</li>
                <li>**Product Backlog:** Lista priorizada de todo el trabajo por hacer (historias de usuario).</li>
                <li>**Daily Standup (Reuni√≥n Diaria):** Reuni√≥n corta donde cada miembro dice: ¬øQu√© hice ayer? ¬øQu√© har√© hoy? ¬øQu√© impedimentos tengo?</li>
            </ul>
            <p>SCRUM prioriza la colaboraci√≥n, la entrega frecuente y la adaptaci√≥n constante al cambio.</p>
        </section>
    `,

    // SEGURIDAD B√ÅSICA - Coincide con #seguridad-basica
    "seguridad-basica": `
        <section id="seguridad-basica">
            <h2>üîí Seguridad Web: Prevenci√≥n de Ataques Comunes</h2>
            <p>La seguridad es responsabilidad de todo programador (Back-End, Front-End y BBDD). Nunca conf√≠es en la informaci√≥n que proviene del usuario.</p>

            <h3>Amenazas Cr√≠ticas</h3>
            <p>Debes conocer y saber c√≥mo prevenir:</p>
            <ul>
                <li>**SQL Injection:** Un atacante inserta c√≥digo SQL malicioso en un campo de entrada para robar o modificar datos. **Prevenci√≥n:** Usar consultas preparadas o parametrizadas.</li>
                <li>**XSS (Cross-Site Scripting):** Un atacante inyecta c√≥digo JavaScript en una web leg√≠tima para robar sesiones de usuario. **Prevenci√≥n:** Sanitizar (limpiar) y escapar todo el *input* del usuario antes de mostrarlo.</li>
            </ul>
        </section>
    `,

    // PATRONES DE DISE√ëO - Coincide con #patrones-dise√±o
    "patrones-dise√±o": `
        <section id="patrones-dise√±o">
            <h2>üìê Patrones de Dise√±o (Estructura POO)</h2>
            <p>Los patrones de dise√±o son soluciones probadas a problemas comunes. Te ayudan a escribir c√≥digo m√°s modular, reutilizable y f√°cil de mantener (Principios SOLID).</p>

            <h3>Patr√≥n Singleton (Creacional)</h3>
            <p><strong>Prop√≥sito:</strong> Garantiza que una clase solo tenga **una instancia** y proporciona un punto de acceso global a ella. √ötil para gestionar la conexi√≥n a una Base de Datos o la configuraci√≥n.</p>

            <h3>Patr√≥n Factory (Creacional)</h3>
            <p><strong>Prop√≥sito:</strong> Proporciona una interfaz para crear objetos en una superclase, pero permite a las subclases alterar el tipo de objetos que se crean. √ötil para la creaci√≥n flexible de objetos (ej. crear diferentes tipos de veh√≠culos).</p>
        </section>
    `,

    // DOCKER Y CONTENEDORES - Coincide con #docker-contenedores
    "docker-contenedores": `
        <section id="docker-contenedores">
            <h2>üê≥ Contenedores: Docker y la Virtualizaci√≥n Ligera</h2>
            <p>Docker es la herramienta est√°ndar para el despliegue avanzado. Resuelve el problema del "¬øFunciona en mi m√°quina, pero no en el servidor?".</p>

            <h3>Conceptos Clave</h3>
            <ul>
                <li>**Contenedor:** Una unidad de software estandarizada que empaqueta c√≥digo y todas sus dependencias para que la aplicaci√≥n se ejecute de forma r√°pida y fiable en cualquier entorno.</li>
                <li>**Imagen:** Es el "plano" (o plantilla) inmutable que contiene todo lo necesario para ejecutar el c√≥digo.</li>
                <li>**Docker Compose:** Una herramienta para definir y ejecutar aplicaciones multi-contenedor (ej. base de datos + backend + frontend).</li>
            </ul>
            <p>Usar Docker asegura que tu entorno de desarrollo es id√©ntico a tu entorno de producci√≥n.</p>
        </section>
    `,

    // OPTIMIZACI√ìN WEB - Coincide con #optimizacion-web
    "optimizacion-web": `
        <section id="optimizacion-web">
            <h2>‚ö° Optimizaci√≥n y Rendimiento Web (Core Vitals)</h2>
            <p>La velocidad de carga y la experiencia del usuario (UX) son cr√≠ticas. Google mide el rendimiento con las **Core Web Vitals**.</p>

            <h3>Claves de Optimizaci√≥n</h3>
            <ol>
                <li>**Compresi√≥n:** Usar Gzip o Brotli para reducir el tama√±o de los archivos CSS, JS y HTML que se env√≠an al navegador.</li>
                <li>**Im√°genes:** Optimizar el tama√±o de las im√°genes y usar formatos modernos como WebP.</li>
                <li>**Cach√©:** Configurar el servidor para que el navegador guarde (cachee) los archivos est√°ticos y no tenga que descargarlos en cada visita.</li>
            </ol>
            <p>Herramientas como **Lighthouse** te ayudan a auditar estos puntos.</p>
        </section>
    `,

    // TYPESCRIPT MODULAR - Coincide con #typescript-modular
    "typescript-modular": `
        <section id="typescript-modular">
            <h2>üî∑ TypeScript e Ingenier√≠a de Software</h2>
            <p>TypeScript (TS) es un "superset" de JavaScript que a√±ade **tipado est√°tico**. Es decir, puedes definir si una variable es un n√∫mero, una cadena, etc.</p>

            <h3>Ventajas para Proyectos Grandes</h3>
            <ul>
                <li>**Menos Errores:** Atrapa errores de tipo en tiempo de desarrollo, antes de que lleguen a producci√≥n.</li>
                <li>**Mayor Legibilidad:** El c√≥digo es m√°s claro al saber exactamente qu√© tipo de dato debe recibir una funci√≥n.</li>
                <li>**Herramientas Avanzadas:** Mejora la autocompletado y la refactorizaci√≥n en editores como VS Code.</li>
            </ul>
            <p>Es la herramienta preferida en las grandes empresas para construir aplicaciones escalables (DAW Avanzado).</p>
        </section>
    `
};


// =============================================================
// ‚úÖ L√ìGICA DE CARGA Y RENDERIZADO (Sin cambios)
// =============================================================

function renderSection(hash) {
    const key = hash.replace("#", "") || "home"; 
    const contentElement = document.getElementById("content");

    const searchInput = document.getElementById("searchInput");
    if (searchInput && searchInput.value.length > 0) {
         searchInput.value = '';
    }

    const sectionContent = sections[key];
    contentElement.innerHTML = sectionContent ? sectionContent : sections.home;
}

window.addEventListener("hashchange", () => renderSection(location.hash));
document.addEventListener("DOMContentLoaded", () => {
    renderSection(location.hash);

    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                searchContent();
            }
        });
    }
});
